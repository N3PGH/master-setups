### Recap of Previous Class - Git Basics (00:02 - 10:02)

- Git stands for Global Information Tracker.
- Git is used as a Version Control System to store source code.
- Version Control System is used to store the code of each version separately for rollback purposes.
- Git is also called Source Code Management.
- Git is used to track files and maintain multiple versions of the same file.
- Git is platform-independent and can be used on any operating system.
- Git is free and open source.
- Git was written in which programming language and in which year.
- Git was invented by Linus Torvalds.
- Git has two types of control systems - centralized and distributed.
- Git has three stages - working directory, staging, and repository.
- Commands to create a file: `touch <filename>` and to check status: `git status`.
- Command to add a file to tracking: `git add <filename>`.
- Command to commit a file: `git commit -m "commit message"`.
- Command to view logs in a single line: `git log --oneline`.
- User configuration in Git: `git config user.name` and `git config user.email`.

### Introduction to Branches

- Branches are used as an individual line of development for the code.
- Developers create branches to work separately on their code.
- Each developer works on one branch.
- Different branches are created in real-time, such as release branch, feature branch, hotfix branch, master branch, and dev branch.
- Each branch is used to store the code separately without merging to other files.

### Git Branches (10:04 - 20:02)

- Each developer works on their own branch on their local laptop
- Branches are created with the help of Git - `git branch <branch name>`
- At the end of the day, all branches are combined together and pushed to GitHub
- The default branch in Git is `Master`
- Developers create multiple branches to work individually

### Creating and Switching to a New Branch

- To create a new branch: `git branch <branch name>`
- To switch to a new branch: `git checkout <branch name>` or `git checkout -b <branch name>` to create and switch in one command

### Adding and Committing Files

- After creating files, they need to be tracked with `git add <file name>` or `git add .` to track all files
- To commit the changes, use `git commit -m "<commit message>"`

### Pushing Changes to GitHub

- To push changes to GitHub: `git push <remote> <branch>`
- The developer's changes are pushed to their own branch on GitHub, and then combined with other developers' changes at the end of the day

### Branch Creation (20:05 - 30:03)

- Developers create a branch on their local laptop using the command `git branch <branch-name>`.
- To switch to a branch, use the command `git checkout <branch-name>`.
- To create and switch to a new branch at the same time, use the command `git checkout -b <branch-name>`.
- To list all branches, use the command `git branch`.

### Adding and Committing Files

- To create a new file, use the command `touch <filename>`.
- To add all files for staging, use the command `git add .`.
- To commit files, use the command `git commit -m "<commit-message>"`.

### GitHub

- GitHub is a centralized repository where developers can push their code.
- To push code to GitHub, use the command `git push <remote> <branch>`.

### Miscellaneous

- To check the status of the repository, use the command `git status`.
- The files from the previous branch will carry forward only if they are committed before creating a new branch.

### Creating a GitHub Account (30:05 - 40:02)

- GitHub is a centralized repository where developers can store their source code.
- To create a GitHub account, you need a username, password, and email.
- Go to GitHub.com and click "Sign up".
- Enter your email, choose a password, and create a unique username.
- Verify your account by completing a puzzle.
- Select your account type (student/teacher).
- Choose your purpose for using GitHub (coding/collaboration/automation).
- Select the free option.
- Your GitHub account is now created.

### Creating a GitHub Repository

- A repository is where you store your code on GitHub.
- Click "New" to create a repository.
- Name your repository and choose whether it's public or private.
- Click "Create repository" and your repository is now created.

### Configuring GitHub to Local Git

- To push code from your local laptop to GitHub, you need to configure Git to connect to GitHub.
- Use the command provided on GitHub to establish a connection.
- The command adds a remote repository to Git.
- "Origin" in the command refers to the location of the repository (in this case, GitHub).
- "Su bani 06" is the username of the GitHub user who created the repository.
- "PTM" is the name of the repository.

### Establishing Communication between Local Git and GitHub (40:06 - 50:06)

- To establish communication, copy and paste the command that appears in the diagram given by the speaker.
- The command will establish a connection between the local git and GitHub.
- Without establishing this connection, git and GitHub cannot communicate with each other.

### Pushing Repository to GitHub

- To push the repository, use the command `git push origin <branch-name>`.
- Before pushing, the user needs to configure GitHub to their local git.
- GitHub passwords are not accepted, so a token needs to be generated for authentication.

### Generating a Token

- To generate a token, click on the profile, then settings, then developer settings, then personal access token, then classic, and finally generate token.
- Give the token a name, select the expiration date, and select the scope (level of permission).
- Click on generate token.
- The token is visible only once, so copy and paste it somewhere else to save it.
- If a space is added to the token, it will not be accepted.

### Important Note about Token Authentication

- GitHub no longer accepts passwords for authentication after August 2021.
- Tokens are preferred due to their length and one-time use.
- Tokens can be used for 7, 30, 60, 90 days, or custom periods.
- Tokens have different scopes for different levels of permission.
- Tokens must be regenerated if they are needed more than once.

### Issue with GitHub Token (50:10 - 00:08)

- Support for password authentication was removed on August 13
- Issue occurred while pushing origin Master
- Tokens were regenerated multiple times
- Issue seems to be with token permission
- Issue is not from account side, but from tokens

### Attempting to Resolve Issue

- Creating a new repository for verification purposes
- Attempting to push files from a different account
- Generating new tokens with different permissions
- Searching for any new updates related to GitHub tokens

### Possible Solutions

- Create a new token with different permissions
- Check for any new updates related to GitHub tokens

### Git Branches (00:12 - 10:10)

- Git branch is a lightweight movable pointer to a commit.
- Git merge is a command used to merge two different branches.
- Use the command 'git merge &lt;branch-name&gt;' to merge files between two branches.
- Use the command 'git rebase &lt;branch-name&gt;' to merge files between two branches using rebase instead of merge.
- Merge stores history, but rebase does not.
- Merge shows how many files are merged, but rebase does not show the name of the files.
- Merge is used for public repos, and rebase is used for private repos.

### Troubleshooting

- Use personal access token for authentication.
- If the token is not working, try generating a new token.
- If the account is not working, try configuring the git user name and email.
- If issues persist, check if it's an issue with the server.

### Commands

- 'git merge &lt;branch-name&gt;' - merge files between two branches.
- 'git rebase &lt;branch-name&gt;' - merge files between two branches using rebase instead of merge.
- 'git push origin &lt;branch-name&gt;' - push the changes to the specified branch.
- 'git checkout -b &lt;branch-name&gt;' - create a new branch and switch to it.

### Creating Branches and Pushing to GitHub (10:14 - 19:14)

- Command to get username and password from token: "give username again raham sh7 password where you can get from"
- Command to checkout a branch: "get checkout &lt;branch-name&gt;"
- Command to add changes to a branch: "do dot P get add &lt;file-name&gt;"
- Command to commit changes: "get commit -m &lt;message&gt;"
- Command to push changes to GitHub: "get push origin &lt;branch-name&gt;"
- GitHub account should display all pushed branches


