docker 
{-i=interactive, -t=terminal, -d=deamon,
 -c=create, -v=verbose, -f=forcefully
pid=process id
ppid=parent process id
____________________________________________
DOCKERFILE: It is basically a text file. It contains some set of instruction.
 Automation of Docker image Creation.

DOCKER COMPONENT{the following components must be in CAP letters}

FROM:for base image this command must be on top of dockerfile.

RUN: to execute commands, it will create a layer in image

MAINTAINER: Ayther/Owner/Description

COPY: copy files from local system (docker vm)
we need to provide source,destination
(we can't download file from internet and any remote repo)
 
ADD: similar to copy,but it provides a feature to download files from 
 internet, also we extractfile at docker image side.

EXPOSE: to expose ports such as port 8080 for tomcat,port 80 for nginx,etc.

WORKDIR: to set working directory for a container

CMD: execute commands but during container creation

ENTRYPOINT: similar to CMD, but has higher priority over CMD, first
 commands will be executed by ENTRYPOINT only

ENV: envoronment variables

ARG: argument
-------------------------------------------
[ec2-user]#vi Dockerfile
FROM  ubnuntu
RUN echo "training file for dockerfile" > /tmp/testdfile
:wq!

[ec2-user]#docker built -t <imagename> . 
[ec2-user]#docker run -it --name testcontainer <imagename> /bin/bash
[testcontainer]ls
[testcontainer]exit

[ec2-user]#vi Dockerfile

FROM ubuntu
WORKDIR /tmp
RUN ech "training file for dockerfile" > /tmp/testdfile
ENV myname testname
COPY testfile /tmp
ADD test tar.gz /tmp

[ec2-user]#touch testfile
[ec2-user]#touch test
[ec2-user]#tar -cvf test.tar test
[ec2-user]#gzip test.tar
[ec2-user]#rm -rf test
[ec2-user]#docker build -t newimage .

[ec2-user]#docker run -it --name newcontainer newimage/bin/bash
[newcontainer:/tmp]cat testfile
[newcontainer:/tmp]echo $myname
[newcontainer:/tmp]exit
[ec2-user]#

______________________________________________
 Docker Volume:
 
Volume is simply a directory inside container.
Firstly, we have to declare this directory as a volume and then sharevolume.
You can declare a directory as a volume only whlie creating a container.
You can't create volume from existing container.
You can share one volume across any number of containers.
Volume will not be included when you update an image.

Volume mapping :
container<---->container
host<---->container
-------------------------------------
Benifits of volume:
Decoupling container from storage.
Share Volume among different Containers.
Attach volume to container.
On deletion of container volume does not delete.
-----------------------------------------
 
{Createing volume from dockerfile(container<---->container)}
   >FROM ubuntu
     VOLUME ["/myvloume"]

{now build a image from docker file}
[ec2-user]#docker built -t myimage .
[ec2-user]#docker run -it --name container1 myimage /bin/bash
[container1]ls
[container]exit

{now share volume with another another container}
[ec2-user]#docker run -it --name container2 --privileged=true --volume-from container1
   ubuntu /bin/bash
----------------------------------------------------
{Another method to create volume}

[ec2-user]#docker run -it --name container3 -v /volume2 ubuntu /bin/bash
[container3]ls =create file in this container &exit

[ec2-user]#docker run -it --name container4 --privileged=true --volume-from container3
    ubuntu /bin/bash
------------------------------------------------------
{host<---->container}

verify file in /home/ec2-user
[ec2-user]#docker run -it --name hostcont -v /home/ec2-user/testdir
  --privileged==true ubuntu /bin/bash

[hostcont] cd /testdir {see list of file in it}
------------------------------------------------------
other volume commands:

[ec2-user]#docker volume ls
[ec2-user]#docker volume create <volumename>
[ec2-user]#docker volume rm <volumename>
[ec2-user]#docker volume prune  {to remove unused docker volume}
[ec2-user]#docker volume inspect <volumename>
[ec2-user]#docker container inspect <containername>
_____________________________________________________________

Docker port expose:
{-p=port/publish}

[ec2-user]#docker ps 
[ec2-user]#docker port <containername>     {list mapped port}

[ec2-user]#docker exec -it <conatinername> /bin/bash 
[cont] apt-get update 
[cont]apt-get install apache2 -y 
[cont]cd /var/www/html
[cont] echo "training demo for docker port expose" >index.html
[cont[service apache2 start
[cont] docker run -td --name myjenkins -p 8080:8080 jenkins

{in AWS instance, goto security tab, change inbound rule
add rule, "custom TCP 8080" }
----------------------------------------------------
Diff between docker attach and docker execute:

Docker exec create a new process in the container's environment while
docker attach just connect the standard i/o of the main process
inside the container to corresponding standard i/o error of current terminal.

Docker exec is specifically for running new things in a already started 
container, be it a shell or some other process.
----------------------------------------------------
Diff between expose and publish

if you specify neither expose nor -p , the service in the container will only 
be assessible from inside the container itself.
if you expose a port, the service in the container is not accesible from outside
docker, but from inside other docker containers, so this is good for 
inter-container communication.

if you do -p but not not expose docker does an implict expose. This is 
because if a port is open to the public, its is automatically open to 
other docker containers.
_p includes expose

if you expose and -p a port, the service in the container is assessible 
from anywhere even outside docker.
_______________________________________________________

Docker Hub:

[ec2-user]#docker commit container1 image1

[ec2-user]#docker login  {connect instnace to dockerhub}
[ec2-user]#docker  tag image1 dockerid/newimage
[ec2-user]#docker push dockerid/newimage

{make respository private in docker hub account to sercure images}

{in other ec2 instance}
[ec2-user]#docker pull dockerid/newimage
[ec2-user]#docker run -it --name mycon dockerid/newimage /bin/bash
-----------------------------------------------------------------

to stop all running containers
[ec2-user]#docker stop $(docker ps -a -q)

to delete all stopped containers 
[ec2-user]#docker rm $(docker ps -a -q)

to delete all image 
[ec2-user]#docker rmi -f $(docker image -q)
