Ansible    

It is an open source IT configuration management, Deployment and
Orchestration tool. It aims to provide large production gains to a wide 
variety of automation challenges.
Michael Dehaan developed Ansible and the ansible project began in
Feb2012.
Redhat acquired the ansible tool in 2015.
Ansible is available for RHEL, Debian,CentOS,Oracle,Linux.
Can use this tool whether your services are in on-premises or in the 
cloud.
It turns your code into infrastructure, i.e, your computing environment
has some of same attributes as your application.

Advantages:
Ansible is free to use by everyone.
Ansible is very consistent and light weight and no constraints regarding
the OS or underlying hardware are present.
It is very secure due to its agentless capabilities and open SSH security 
features.
Ansible does not need any specical system admistrator skills to intall and 
use it.
Push mechanism

Disadvantage:
Insufficient user interface, though ansible tower is GUI, but it is still in 
development stages.
Cannot achieve full automation by ansible.
New to the market, therfore limited support and document is available.
------------------------------------------------------------------------------------------

Term used in ansible

Ansible Server: the machine where asnible is intalled & from which all tasks
       & playbooks will be run.

Module: basically a module is a command or set of similar commands
     meant to be executed on the client side,

Task: a task is a section that consists of a single procedure to be completed.

Role: a way of organising tasks and related files to be later called in a 
      playbook.

Fact: information fetched from the client system from the global varaibles
      with the gather facts operation.

Inventory: File containing data about the ansible client servers.

Play: Execution of a playbook.

Handler: Task which is called only if a notifer is present.

Notifier: Section attribuited to a task which calls a handler if the output 
      is changed.

Playbooks: it consist code in YAML format, which describes tasks to be
    executed.

Host: Nodes, which are automated by ansible.
---------------------------------------------------------------------------------------------
create # EC2 instance in zone
-----------------------------------------
{in ec2-instance-ansiblesever}


[ec2-user]#wget http://dl.fedoraproject.org/pub/epel-release-latest
            -7.noarch.rpm
[ec2-user]#yum install epel-release-latest-7.noarch.rpm -y
[ec2-user]#yum update -y
[ec2-user]#yum install git python python-level python-pip openssl ansible -y


{in ansible server paste private IP* of nodes in host file}
[ec2-user]#vi /etc/ansible/hosts

{now update ansible config file}
[ec2-user]#vi /etc/ansible/ansible.cfg
      >> { uncommented  remove #}
         # inventory = /etc/ansible/hosts
         #sudo -user = root

{create ansible user in all instance}
[ec2-user]#adduser ansible
[ec2-user]#passwd ansible
[ec2-user]# su - ansible          {switch to ansible user}
[ansible]# visudo                         {get root privilege to ansible user}
   >> root ALL=(ALL) ALL
        ansible ALL=(ALL) NOPASSWD: ALL
    :wq!
[ansible] sudo yum install httpd -y 
[ansible]$ ssh 172.31.41.240 
    >>perission denied
[ec2-user]# vi /etc/ssh/sshd_config 
   >>{ uncommented  remove #}
        #permitRootLogin yes
        #PasswordAuthentication yes
        {commented   add #}
        PasswordAuthentication no
     :wq!
[ec2-user]# service sshd restart
[ec2-user]# su - ansible
[ansible]$ ssh 172.31.41.240 
 -------------------------------------------------------------------------------
{now to authenticate ansible server so that no password is required}

[ansible] $ ssh - keygen 
[ansible] cd .ssh/ 
[ansible]ls 
    >>id_rsa id_rsa_pub
[ansible]$ ssh-copy-id ansible@172.31.42.228
[ansible]$ ssh-copy-id ansible@172.32.42.240
[ansible]$ cd ..
---------------------------------------------------------------------------------
Host Patterns:
 all patterns refer to all the m/c in an inventory

[ansible]# ansible all --list-hosts
[ansible]$ ansible <groupname>[0] --list-hosts
                                   { [0] =picks first m/c  of group
                                     [1] = picks second m/c of group 
                                     [-1] = picks last /c of group
                                     [0:1] = pisks first 2 m/c of group
                                     [2:5] = picks 3,4,5,6 m.c of group }
[ansible]$ ansible group1:group2 --list-hosts
-------------------------------------------------------------------------------
{-a= argument, -b= become, demo is  groupname}

Ansible Ad-hoc commands:

Ad-hoc commands are commands which can be run indivially to perform
quick functions.
These ad-hoc commands are not used for configuration management &
deployment, because these copmmands are of One time usage.
The ansible ad-hoc commands uses the /usr/bin/ansible
command line tool to automate a single task

[ansible]$ ansible demo -a "ls"     {list all files in all nodes}
[ansible]$ ansible demo[0] -a "touch filez"
[ansible]$ ansible all -a "touch file4"
[ansible]$ ansible demo -a "ls -al"
[ansible]$ ansible demo -a "sudo yum install httpd -y"
                                           -ba 
[ansible]$ ansible demo -ba "yum remove httpd -y"
_______________________________________________________

Ansible Modules:

Ansible ships with a number of modules (called modules library) that
can be executed directly on remote host or through palybook.
Your library of modules can reside on any machine, and there are no server,
deamons, or databases required.

Default location module library
/etc/ansible/hosts/

Idenpotentency is present in module
------------------------------------------------------------------------------

[ansible]$ ansible demo -b -m yum -a "pkg=httpd state=predent"
[ansible]$ ansible demo -b -m yum -a "pkg=httpd state=latest"
[ansible]$ ansible demo -b -m yum -a "pkg=httpd state=absent"
[ansible]$ ansible demo -b -m user -a "name = raj"
[ansible]$ ansible demo -b -m copy -a "src=file4 dest=/tmp"
[ansible]$ ansible demo -b -m service -a "name=httpd state=started"

---------------------------------------------------------------------------------
{ansible modules idenpotency is present}

[ansible]$ ansible  demo -m setup
[ansible]$ ansible demo -m setup -a "filter=*ipv4*"
__________________________________________________________

Playbook:

Playbook in ansible are written in YAML format.
It ia commonly used for configuration files,
It is chuman readable data serialization language.
It is like a file wher you write code consist of Vars, tasks, handler, files, 
template & roles.
Each playbook is composed of one more modules in a list. module is a 
collection of configuration files.
Playbook are divided into many sections.
Target Section=Defines the host against which playbook task has to be executed.
Variable Section=defines variables.
Task Section=List of all modules that we need to run in an order.
------------------------------------------------------------------------------------
YAML =Yet Another Markup Language

For ansible, nearly every TAML files starts with a list.
Each item in the list is a list of key-value pair commonly called a dictionary.
All YAML files have to begin with "---"  and end with "..."
All members of a list lines must begin with same indentation level
starting with "_"
       eg>> ---# A list of Fruits
	fruit
	_mango
	_banana
	_grapes
	_apple
              ...
A dictionary is represented in a simple key: value form
      eg>>  ---# Detail of Customer
	Customer
	name: customer1
	job: Cg artist
	skill: 3d modeling
	exp: 10 years
--------------------------------------------------------------------------------
{in ansible server}

[ansible]$ vi target.yml
          >>   --- # Target Playbook 
	_ host: demo
	_ user: ansible
	_become: yes
	_connetion: ssh
	_gather_facts: yes
 :wq!
[ansible]$ ansible-playbook target.yml
------------------------------------------------------

[ansible]$ vi task.yml
          >>   --- # Target and Task Playbook 
	  - host : demo
	    user: ansible
	    become: yes
	    connetion: ssh

	     task:
	             - name: install httpd on centos 7
	               action: yum name=httpd state=installed
:wq!
[ansible]$ ansible-playbook task.yml
----------------------------------------------------------

Varibles:

Ansible uses varibles which are define previously to enable more 
flexibilty in playbook & roles. They can be used to loop through a set
of given values, access various information like the host name of a 
system & replace certaib strings in templates with specific values.
Put varibles section above so that we define it first & use it later.

{in ansible server}
[ansible]$ vi vars.yml
        >>  --- #  My Varibles Playbook
                - hosts: demo 
	user: ansible
	become: yes
	connections: ssh
	vars: 
                         pkgname: httpd
	 task:
	       	- name: install httpd server on centos 7
	          	   action: yum name='{{pkgname}}' state=installed
:wq!
[ansible]$ ansible-playbook vars.yml
---------------------------------------------------------------

HANDLER:

A handler is exactly same as a task, but it will run when called by 
another task.
Handler are just like regular tasks in an ansible playbook, but are only run
if the task contains a notify directive and also indicates that it changed 
something.

DRYRUN:
 Check whether the playbook is formatted correctly.
 [ansible]$ ansible-playbook handler.yml --check

{in ansible server}
[ansible]$ vi handler.yml
          >> --- # Handler Playbook
                - host: demo 
	user: ansible
	become: yes 
	connection: ssh
	
	tasks:
		- name: install httpd server on centos
		  actuon: yum name=httpd state=installed
		  notify: restart HTTPD
	handler:
		- name: restart HTTPD
		  action: service name=httpd state=restarted
:wq!
[ansible]$ ansible-playbook hander.yml
----------------------------------------------------------------------

LOOPS:

Sometimes you want to repeat a task multiple times. In computer
prommining, this is callled loops. Common Ansible loops include changings
ownership on serveral files and/or directories with the file module, 
creating multiple users with the user module, & repeating a polling
step until certain result is reached.

{in ansible server}
[ansible]$ vi loops.yml
          >> --- # My Loops Playbook
	- host: demo 
	  user: ansible
	  become: yes 
	  connection: ssh
	task:
		- name: add a list of users
		  user: name='{{item}}' state=present
		  with items:
			-Sam
			-Michel		-
			-Sara
			-Tom
:wq!
[ansible]$ ansible-playbook loops.yml


{in node }
[ec2-user] cat /etc/passwd
------------------------------------------------------------------


Conditions:

Whenever have different different scenarios, we put condition to 
the scenario.

When Statment:
sometime you want to skip a particular command on a particular node.

[ansible]$ vi condition.yml
--- # Condition Playbook
- hosts: demo
 user: ansible
 become: yes 
 connection: ssh
 tasks:
  - name: install apache on debain
    command: apt-get -y install apache2
    when: while_os_family == "debain"
  - name: install apache for redhat
    command: yum -y install httpd
    when: ansible_os_family == "RedHat"
:wq!
-------------------------------------------------------------------------
{encryption technique AES256}
Vault:

Ansible allows keeping sensitive data such as passwards or keys in 
encrypted files, rather than a phiantext in your playbooks.

[ansible]$ ansible-vault create vault.yml
[ansible]$ ansible-vault edit vault.yml
[ansible]$ ansible-vault rekey vault.yml    {to change password}
[ansible]$ ansible-vault encrypt target.yml  {to encrypt existind playbook}
[ansible]$ ansible-vault decrypt target.yml
-----------------------------------------------------------------------------------------

Roles:

We can use tow techniques for reusing a set of tasks- includes & roles.
Roles are goood for orgainsing task and encapsulating data needed to 
accomplish those tasks.

We can organise playbooks into a directory structure called Roles
Adding more &7 more functionality to the playbook will make it 
difficult to mantain in a single file.

Roles types:
	Default: It store the data about role/app*.Default variable
		eg; if you want to run to port 80 or 8080 then variable
		needs to define in this path.
	Files:  It containb files need to be transfered to the remote VM
		(static files)
	Handlers: They are triggers or task. we can segregate all the 
		handlers required in playbook.
	Meta: This directory contain files that establish roles dependencies
		eg; Auther name, supported platform. depenencies if any.
	Tasks: It contains all the taskes that is normally in the playbook
		eg; installing pkg & copies files, etc.
	Vars: Variables for the role cna be specified in this directory &
		used in your configuraton files. Both Vars & Default 
		stores varibles.
	Template:

{in ansible server}

[ansible]$ mkdir -p playbook/roles/webserver/tasks
[ansible]$ tree
[ansible]$ cd playbook
[ansible]$ touch roles/webserver/tasks/main.yml
[ansible]$ touch master.yml
[ansible]$ vi roles/webserver/tasks/main.yml
            >> --- # Main 
	- name: install apache
	  yum: pkg=httpd state=latest
:wq!

[ansible]$ vi master.yml
            >> --- # Master
	- host: all
	  user: ansible
	  become: yes
	  connection: ssh
	  roles:
		- webserver
:wq!
[ansible]$ ansible-playbook master.yml

{read more about ansible on internet}
------------------------------------------------------------------